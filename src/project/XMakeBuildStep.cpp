#include "XMakeBuildStep.hpp"

#include <XMakeProjectConstant.hpp>
#include <project/parsers/XMakeBuildParser.hpp>

#include <utils/commandline.h>

namespace XMakeProjectManager::Internal {
    ////////////////////////////////////////////////////
    ////////////////////////////////////////////////////
    XMakeBuildStep::XMakeBuildStep(ProjectExplorer::BuildStepList *bsl, Utils::Id id)
        : ProjectExplorer::AbstractProcessStep { bsl, id } {}

    ////////////////////////////////////////////////////
    ////////////////////////////////////////////////////
    auto XMakeBuildStep::createConfigWidget() -> QWidget * { return nullptr; }

    ////////////////////////////////////////////////////
    ////////////////////////////////////////////////////
    auto XMakeBuildStep::command() -> Utils::CommandLine { return {}; }

    ////////////////////////////////////////////////////
    ////////////////////////////////////////////////////
    auto XMakeBuildStep::projectTargets() -> QStringList { return {}; }

    ////////////////////////////////////////////////////
    ////////////////////////////////////////////////////
    auto XMakeBuildStep::setBuildTarget(const QString &target_name) -> void {
        m_target_name = target_name;
    }

    ////////////////////////////////////////////////////
    ////////////////////////////////////////////////////
    auto XMakeBuildStep::setCommandArgs(const QString &args) -> void {}

    ////////////////////////////////////////////////////
    ////////////////////////////////////////////////////
    auto XMakeBuildStep::targetName() const -> const QString & { return m_target_name; }

    ////////////////////////////////////////////////////
    ////////////////////////////////////////////////////
    auto XMakeBuildStep::toMap() const -> QVariantMap { return {}; }

    ////////////////////////////////////////////////////
    ////////////////////////////////////////////////////
    auto XMakeBuildStep::fromMap(const QVariantMap &map) -> bool { return false; }

    ////////////////////////////////////////////////////
    ////////////////////////////////////////////////////
    auto XMakeBuildStep::update(bool parsing_successful) -> void {}

    ////////////////////////////////////////////////////
    ////////////////////////////////////////////////////
    auto XMakeBuildStep::doRun() -> void {}

    ////////////////////////////////////////////////////
    ////////////////////////////////////////////////////
    auto XMakeBuildStep::setupOutputFormatter(Utils::OutputFormatter *formatter) -> void {}

    ////////////////////////////////////////////////////
    ////////////////////////////////////////////////////
    auto XMakeBuildStep::defaultBuildTarget() const -> QString { return ""; }

    ////////////////////////////////////////////////////
    ////////////////////////////////////////////////////
    XMakeBuildStepFactory::XMakeBuildStepFactory() {
        registerStep<XMakeBuildStep>(Constants::XMAKE_BUILD_STEP_ID);
        setSupportedProjectType(Constants::Project::ID);
        setDisplayName(XMakeBuildStep::tr("XMake build"));
    }

    ////////////////////////////////////////////////////
    ////////////////////////////////////////////////////
    XMakeBuildStepFactory::~XMakeBuildStepFactory() = default;
} // namespace XMakeProjectManager::Internal
