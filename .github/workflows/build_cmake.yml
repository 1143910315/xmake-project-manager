name: Build plugin

on: [push]

env:
  PLUGIN_NAME: xmake-project-manager
  QT_VERSION: 6.6.0
  QT_CREATOR_VERSION: 12.0.2
  QT_CREATOR_SNAPSHOT: NO
  CMAKE_VERSION: 3.21.1
  NINJA_VERSION: 1.10.1

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
#        - {
#            name: "Windows Latest MSVC", artifact: "Windows-x64",
#            os: windows-latest,
#            cc: "cl", cxx: "cl",
#            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
#          }
        - {
            name: "Ubuntu Latest GCC", artifact: "Linux-x64",
            os: ubuntu-latest,
            cc: "gcc", cxx: "g++"
          }
#        - {
#            name: "macOS Latest Clang", artifact: "macOS-x64",
#            os: macos-latest,
#            cc: "clang", cxx: "clang++"
#          }

    steps:
    - uses: actions/checkout@v3

    - name: Download Ninja and CMake
      shell: cmake -P {0}
      run: |
        set(cmake_version "$ENV{CMAKE_VERSION}")
        set(ninja_version "$ENV{NINJA_VERSION}")

        if ("${{ runner.os }}" STREQUAL "Windows")
          set(ninja_suffix "win.zip")
          set(cmake_suffix "windows-x86_64.zip")
          set(cmake_dir "cmake-${cmake_version}-windows-x86_64/bin")
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(ninja_suffix "linux.zip")
          set(cmake_suffix "linux-x86_64.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-linux-x86_64/bin")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(ninja_suffix "mac.zip")
          set(cmake_suffix "macos-universal.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-macos-universal/CMake.app/Contents/bin")
        endif()

        set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
        file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)

        set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
        file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)

        # Add to PATH environment variable
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
        set(path_separator ":")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(path_separator ";")
        endif()
        file(APPEND "$ENV{GITHUB_PATH}" "$ENV{GITHUB_WORKSPACE}${path_separator}${cmake_dir}")

        if (NOT "${{ runner.os }}" STREQUAL "Windows")
          execute_process(
            COMMAND chmod +x ninja
            COMMAND chmod +x ${cmake_dir}/cmake
          )
        endif()

    - name: Install system libs
      shell: cmake -P {0}
      run: |
        if ("${{ runner.os }}" STREQUAL "Linux")
          execute_process(
            COMMAND sudo apt update
          )
          execute_process(
            COMMAND
              sudo apt install chrpath
                               libgl1-mesa-dev libvulkan-dev libxcb-xinput-dev libxcb-xinerama0-dev libxkbcommon-dev libxkbcommon-x11-dev
                               libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xkb1 libxcb-randr0 libxcb-icccm4
                               xvfb
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Failed to install dependencies")
          endif()
        endif()

        if ("${{ runner.os }}" STREQUAL "Windows")
          file(MAKE_DIRECTORY build/build/bin)
          foreach(retry RANGE 10)
            file(DOWNLOAD "https://download.qt.io/development_releases/prebuilt/llvmpipe/windows/opengl32sw-64.7z" ./opengl32sw-64.7z SHOW_PROGRESS)
            file(SIZE ./opengl32sw-64.7z fileSize)
            if (fileSize GREATER 0)
              break()
            endif()
          endforeach()
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../../../opengl32sw-64.7z WORKING_DIRECTORY build/build/bin)
        endif()

        if (NOT "x${{ matrix.config.toolchain }}" STREQUAL "x")
          foreach(retry RANGE 10)
            file(DOWNLOAD "${{ matrix.config.toolchain }}" ./toolchain.7z SHOW_PROGRESS)
            file(SIZE ./toolchain.7z fileSize)
            if (fileSize GREATER 0)
              break()
            endif()
          endforeach()
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./toolchain.7z)
        endif()

        # For tests update the docker image
        find_program(docker_executable docker)
        if (docker_executable)
          execute_process(COMMAND ${docker_executable} pull alpine:latest COMMAND_ECHO STDOUT)
        endif()

    - name: Download Qt
      id: qt
      shell: cmake -P {0}
      run: |
        set(qt_version "$ENV{QT_VERSION}")

        string(REPLACE "." "" qt_version_dotless "${qt_version}")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(url_os "windows_x86")
          set(qt_package_arch_suffix "win64_msvc2019_64")
          set(qt_dir_prefix "${qt_version}/msvc2019_64")
          set(qt_package_suffix "-Windows-Windows_10_22H2-MSVC2019-Windows-Windows_10_22H2-X86_64")
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(url_os "linux_x64")
          set(qt_package_arch_suffix "gcc_64")
          set(qt_dir_prefix "${qt_version}/gcc_64")
          set(qt_package_suffix "-Linux-RHEL_8_6-GCC-Linux-RHEL_8_6-X86_64")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(url_os "mac_x64")
          set(qt_package_arch_suffix "clang_64")
          set(qt_dir_prefix "${qt_version}/macos")
          set(qt_package_suffix "-MacOS-MacOS_12-Clang-MacOS-MacOS_12-X86_64-ARM64")
        endif()

        set(qt_base_url "https://download.qt.io/online/qtsdkrepository/${url_os}/desktop/qt6_${qt_version_dotless}")
        file(DOWNLOAD "${qt_base_url}/Updates.xml" ./Updates.xml SHOW_PROGRESS)

        file(READ ./Updates.xml updates_xml)
        string(REGEX MATCH "<Name>qt.qt6.*<Version>([0-9+-.]+)</Version>" updates_xml_output "${updates_xml}")
        set(qt_package_version ${CMAKE_MATCH_1})

        file(MAKE_DIRECTORY qt6)

        # Save the path for other steps
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/qt6/${qt_dir_prefix}" qt_dir)
        file(APPEND "$ENV{GITHUB_OUTPUT}" "qt_dir=${qt_dir}")

        message("Downloading Qt to ${qt_dir}")
        function(downloadAndExtract url archive)
          message("Downloading ${url}")
          file(DOWNLOAD "${url}" ./${archive} SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../${archive} WORKING_DIRECTORY qt6)
        endfunction()

        foreach(package qtbase qtdeclarative qttools qtsvg qttranslations)
          downloadAndExtract(
            "${qt_base_url}/qt.qt6.${qt_version_dotless}.${qt_package_arch_suffix}/${qt_package_version}${package}${qt_package_suffix}.7z"
            ${package}.7z
          )
        endforeach()

        foreach(package qtimageformats qtserialport)
            downloadAndExtract(
            "${qt_base_url}/qt.qt6.${qt_version_dotless}.addons.${package}.${qt_package_arch_suffix}/${qt_package_version}${package}${qt_package_suffix}.7z"
            ${package}.7z
            )
        endforeach()

        foreach(package qt5compat qtshadertools qtquicktimeline qtquick3d)
          downloadAndExtract(
            "${qt_base_url}/qt.qt6.${qt_version_dotless}.${package}.${qt_package_arch_suffix}/${qt_package_version}${package}${qt_package_suffix}.7z"
            ${package}.7z
          )
        endforeach()

        # uic depends on libicu56.so
        if ("${{ runner.os }}" STREQUAL "Linux")
          downloadAndExtract(
            "${qt_base_url}/qt.qt6.${qt_version_dotless}.${qt_package_arch_suffix}/${qt_package_version}icu-linux-Rhel7.2-x64.7z"
            icu.7z
          )
        endif()

        file(READ "qt6/${qt_dir_prefix}/mkspecs/qconfig.pri" qtconfig)
        string(REPLACE "Enterprise" "OpenSource" qtconfig "${qtconfig}")
        string(REPLACE "licheck.exe" "" qtconfig "${qtconfig}")
        string(REPLACE "licheck64" "" qtconfig "${qtconfig}")
        string(REPLACE "licheck_mac" "" qtconfig "${qtconfig}")
        file(WRITE "qt6/${qt_dir_prefix}/mkspecs/qconfig.pri" "${qtconfig}")

        if ("${{ runner.os }}" STREQUAL "Windows")
          # deploy "system" runtimes into Qt, so they get deployed as well
          if ("x${{ matrix.config.environment_script }}" STREQUAL "x")
            # deploy MinGW
            foreach(file libwinpthread-1.dll libstdc++-6.dll libgcc_s_seh-1.dll)
              file(INSTALL "$ENV{GITHUB_WORKSPACE}/${{ matrix.config.toolchain_path }}/${file}"
                   DESTINATION "qt6/${qt_dir_prefix}/bin"
                   USE_SOURCE_PERMISSIONS)
            endforeach()
          else()
            # deploy MSVC
            foreach(file vcruntime140.dll concrt140.dll msvcp140_1.dll msvcp140_2.dll
                         msvcp140_codecvt_ids.dll vcruntime140_1.dll msvcp140.dll)
              file(INSTALL "C:/Windows/System32/${file}"
                   DESTINATION "qt6/${qt_dir_prefix}/bin")
            endforeach()
          endif()
        endif()

    - name: Download OpenSSL
      shell: cmake -P {0}
      run: |
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(url_os "windows_x86")
          set(openssl_localdir "Tools/OpenSSL/Win_x64/bin")
          set(openssl_dest_dir "${{ steps.qt.outputs.qt_dir }}/bin")
          set(shared_suffix ".dll")
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(url_os "linux_x64")
          set(openssl_localdir "Tools/OpenSSL/binary/lib")
          set(openssl_dest_dir "${{ steps.qt.outputs.qt_dir }}/lib/Qt/lib")
          set(shared_suffix ".so*")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          # Not needed on macOS
          return()
        endif()

        set(openssl_base_url "https://\${qt_mirror}/online/qtsdkrepository/${url_os}/desktop/tools_openssl_x64")
        foreach(qt_mirror $ENV{QT_MIRRORS})
          cmake_language(EVAL CODE "
            message(\"Downloading ${openssl_base_url}/Updates.xml}\")
            file(DOWNLOAD \"${openssl_base_url}/Updates.xml\" ./Updates.xml)
          ")
          file(SIZE ./Updates.xml fileSize)
          if (fileSize GREATER 0)
            break()
          endif()
        endforeach()

        file(READ ./Updates.xml updates_xml)
        string(REGEX MATCH
          "<Name>(qt.tools.openssl.*)</Name>.*<Version>([0-9+-.]+)</Version>.*<DownloadableArchives>(.*)</DownloadableArchives>" updates_xml_output "${updates_xml}")

        set(openssl_directory ${CMAKE_MATCH_1})
        set(openssl_version ${CMAKE_MATCH_2})
        set(openssl_archive ${CMAKE_MATCH_3})

        set(url "${openssl_base_url}/${openssl_directory}/${openssl_version}${openssl_archive}")

        file(MAKE_DIRECTORY openssl)
        file(MAKE_DIRECTORY ${openssl_dest_dir})

        foreach(qt_mirror $ENV{QT_MIRRORS})
          cmake_language(EVAL CODE "
            message(\"Downloading ${url}\")
            file(DOWNLOAD \"${url}\" ./openssl.7z)
          ")
          file(SIZE ./openssl.7z fileSize)
          if (fileSize GREATER 0)
            break()
          endif()
        endforeach()
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../openssl.7z WORKING_DIRECTORY openssl)

        file(GLOB openssl_shared_objects "openssl/${openssl_localdir}/*${shared_suffix}")
        execute_process(
          COMMAND ${CMAKE_COMMAND} -E copy ${openssl_shared_objects} ${openssl_dest_dir})

    - name: Download libclang
      id: libclang
      shell: cmake -P {0}
      run: |
        set(clang_version "$ENV{CLANG_VERSION}")

        if ("${{ runner.os }}" STREQUAL "Windows")
          if ("x${{ matrix.config.environment_script }}" STREQUAL "x")
            set(libclang "libclang-release_${clang_version}-based-windows-mingw_64.7z")
          elseif ("${{ matrix.config.environment_script }}" MATCHES "vcvars64.bat")
            set(libclang "libclang-release_${clang_version}-based-windows-vs2019_64.7z")
          elseif ("${{ matrix.config.environment_script }}" MATCHES "vcvars32.bat")
            set(libclang "libclang-release_${clang_version}-based-windows-vs2019_32.7z")
          endif()
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(libclang "libclang-release_${clang_version}-based-linux-Ubuntu22.04-gcc11.4-x86_64.7z")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(libclang "libclang-release_${clang_version}-based-macos-universal.7z")
        endif()

        set(libclang_url "https://\${qt_mirror}/development_releases/prebuilt/libclang/${libclang}")
        foreach(qt_mirror $ENV{QT_MIRRORS})
          cmake_language(EVAL CODE "
            message(\"Downloading ${libclang_url}\")
            file(DOWNLOAD \"${libclang_url}\" ./libclang.7z)
          ")
          file(SIZE ./libclang.7z fileSize)
          if (fileSize GREATER 0)
            break()
          endif()
        endforeach()

        # Comes with libclang inside the archive
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./libclang.7z)

        # Save the path for other steps
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/libclang" libclang_dir)
        file(APPEND "$ENV{GITHUB_OUTPUT}" "libclang_dir=${libclang_dir}")

    - name: Download elfutils
      if: runner.os == 'Windows' && matrix.config.is_msvc || runner.os == 'Linux'
      id: elfutils
      shell: cmake -P {0}
      run: |
        set(elfutils_version "$ENV{ELFUTILS_VERSION}")

        if ("${{ runner.os }}" STREQUAL "Windows")
          if ("${{ matrix.config.environment_script }}" MATCHES "vcvars64.bat")
            set(elfutils "elfutils-release_${elfutils_version}qt-windows-x86_64.7z")
          elseif ("${{ matrix.config.environment_script }}" MATCHES "vcvars32.bat")
            set(elfutils "elfutils-release_${elfutils_version}qt-windows-i686.7z")
          endif()
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(elfutils "elfutils-release_${elfutils_version}qt-linux-x86_64.7z")
        endif()

        set(elfutils_url "https://\${qt_mirror}/development_releases/prebuilt/elfutils/${elfutils}")

        foreach(qt_mirror $ENV{QT_MIRRORS})
          cmake_language(EVAL CODE "
            message(\"Downloading ${elfutils_url}\")
            file(DOWNLOAD \"${elfutils_url}\" ./elfutils.7z)
          ")
          file(SIZE ./elfutils.7z fileSize)
          if (fileSize GREATER 0)
            break()
          endif()
        endforeach()
        file(MAKE_DIRECTORY elfutils)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../elfutils.7z WORKING_DIRECTORY elfutils)

        # Save the path for other steps
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/elfutils" elfutils_dir)
        file(APPEND "$ENV{GITHUB_OUTPUT}" "elfutils_dir=${elfutils_dir}")

    - name: Download ccache
      shell: cmake -P {0}
      run: |
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(ccache_dir "ccache-$ENV{CCACHE_VERSION}-windows-x86_64")
          set(ccache_archive "${ccache_dir}.zip")
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(ccache_dir "ccache-$ENV{CCACHE_VERSION}-linux-x86_64")
          set(ccache_archive "${ccache_dir}.tar.xz")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(ccache_dir "ccache-$ENV{CCACHE_VERSION}-darwin")
          set(ccache_archive "${ccache_dir}.tar.gz")
        endif()

        set(ccache_url "https://github.com/ccache/ccache/releases/download/v$ENV{CCACHE_VERSION}/${ccache_archive}")
        file(DOWNLOAD "${ccache_url}" ./${ccache_archive} SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./${ccache_archive})

        # Add to PATH environment variable
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${ccache_dir}" ccache_dir)
        set(path_separator ":")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(path_separator ";")
        endif()
        file(APPEND "$ENV{GITHUB_PATH}" "$ENV{GITHUB_WORKSPACE}${path_separator}${ccache_dir}")

        if (NOT "${{ runner.os }}" STREQUAL "Windows")
          execute_process(COMMAND chmod +x ${ccache_dir}/ccache)
        endif()

#
#    - name: Prepare ccache archive name
#      id: ccache
#      shell: cmake -P {0}
#      run: |
#        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}" github_workspace)
#        include(${github_workspace}/cmake/QtCreatorIDEBranding.cmake)
#        string(REPLACE "." ";" IDE_VERSION_LIST ${IDE_VERSION_DISPLAY})
#        list(GET IDE_VERSION_LIST 0 IDE_VERSION_MAJOR)
#        file(APPEND "$ENV{GITHUB_OUTPUT}" "archive_name=ccache-${{ matrix.config.os }}-${{ matrix.config.cc }}-qtc${IDE_VERSION_MAJOR}")

    - name: Download ccache archive
      shell: cmake -P {0}
      run: |
        file(WRITE $ENV{GITHUB_WORKSPACE}/netrc.txt
          "default login runneradmin password ${{ secrets.GITHUB_TOKEN }}")

        foreach(page_id RANGE 1 10)
          file(
            DOWNLOAD "https://api.github.com/repos/${{ github.repository }}/actions/artifacts?per_page=100&page=${page_id}"
            HTTPHEADER "Accept: application/vnd.github.v3+json"
            NETRC_FILE "$ENV{GITHUB_WORKSPACE}/netrc.txt"
            NETRC REQUIRED
            SHOW_PROGRESS
            artifacts.json)
          file(READ artifacts.json artifacts_json)

          string(JSON artifacts_length LENGTH "${artifacts_json}" "artifacts")
          math(EXPR artifacts_length "${artifacts_length} - 1")
          if(${artifacts_length} GREATER_EQUAL 0)
            foreach(idx RANGE 0 ${artifacts_length})
              string(JSON artifact_js GET "${artifacts_json}" "artifacts" ${idx})
              string(JSON name GET "${artifact_js}" "name")
              if ("${name}" STREQUAL "${{ steps.ccache.outputs.archive_name }}")
                string(JSON download_url GET "${artifact_js}" "archive_download_url")

                foreach(retry RANGE 10)
                  file(DOWNLOAD "${download_url}"
                    "${{ steps.ccache.outputs.archive_name }}.zip"
                    NETRC_FILE "$ENV{GITHUB_WORKSPACE}/netrc.txt"
                    NETRC REQUIRED
                    SHOW_PROGRESS)
                  file(SIZE "${{ steps.ccache.outputs.archive_name }}.zip" fileSize)
                  if (fileSize GREATER 0)
                    break()
                  endif()
                endforeach()

                execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf "${{ steps.ccache.outputs.archive_name }}.zip")
                file(MAKE_DIRECTORY .ccache)
                execute_process(COMMAND ${CMAKE_COMMAND} -E tar xf "../${{ steps.ccache.outputs.archive_name }}.tar" WORKING_DIRECTORY .ccache)

                return()
              endif()
            endforeach()
          endif()
        endforeach()

    - name: Download Qt Creator
      id: qt_creator
      shell: cmake -P {0}
      run: |
        string(REGEX MATCH "([0-9]+.[0-9]+).[0-9]+" outvar "$ENV{QT_CREATOR_VERSION}")

        set(qtc_base_url "https://download.qt.io/official_releases/qtcreator/${CMAKE_MATCH_1}/$ENV{QT_CREATOR_VERSION}/installer_source")
        set(qtc_snapshot "$ENV{QT_CREATOR_SNAPSHOT}")
        if (qtc_snapshot)
          set(qtc_base_url "https://download.qt.io/snapshots/qtcreator/${CMAKE_MATCH_1}/$ENV{QT_CREATOR_VERSION}/installer_source/${qtc_snapshot}")
        endif()

        if ("${{ runner.os }}" STREQUAL "Windows")
          set(qtc_platform "windows_x64")
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(qtc_platform "linux_x64")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(qtc_platform "mac_x64")
        endif()

        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/qtcreator" qtc_dir)
        # Save the path for other steps
        file(APPEND "$ENV{GITHUB_OUTPUT}" "qtc_dir=${qtc_dir}")

        file(MAKE_DIRECTORY qtcreator)

        message("Downloading Qt Creator from ${qtc_base_url}/${qtc_platform}")

        foreach(package qtcreator qtcreator_dev)
            message("Downloading ${package} from ${qtc_base_url}/${qtc_platform}/${package}.7z")
            file(DOWNLOAD
                "${qtc_base_url}/${qtc_platform}/${package}.7z" ./${package}.7z SHOW_PROGRESS)
            execute_process(COMMAND
                ${CMAKE_COMMAND} -E tar xvf ../${package}.7z WORKING_DIRECTORY qtcreator)
        endforeach()

#Found Qt6Config.cmake at: /home/runner/work/xmake-project-manager/xmake-project-manager/qt6/6.6.0/gcc_64/lib/cmake/Qt6/Qt6Config.cmake
#    - name: Find Qt6Config.cmake and set as environment variable
#      run: |
#        search_dir="${GITHUB_WORKSPACE}"
#        Qt6ConfigPath=$(find "${search_dir}" -type f -name "Qt6Config.cmake")
#        echo "Found Qt6Config.cmake at: ${Qt6ConfigPath}"
#        echo "Qt6_DIR=${Qt6ConfigPath}" >> $GITHUB_ENV

    - name: Find qtcprocess.h
      run: |
        search_dir="${GITHUB_WORKSPACE}"
        qtcprocessPath=$(find "${search_dir}" -type f -name "qtcprocess.h")
        echo "Found qtcprocess.h at: ${qtcprocessPath}"
  
    - name: Build
      shell: cmake -P {0}
      run: |
        set(ENV{CC} ${{ matrix.config.cc }})
        set(ENV{CXX} ${{ matrix.config.cxx }})
        set(ENV{MACOSX_DEPLOYMENT_TARGET} "10.13")

        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          execute_process(
            COMMAND "${{ matrix.config.environment_script }}" && set
            OUTPUT_FILE environment_script_output.txt
          )
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()

        set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")

        set(build_plugin_py "scripts/build_plugin.py")
        foreach(dir "share/qtcreator/scripts" "Qt Creator.app/Contents/Resources/scripts" "Contents/Resources/scripts")
          if(EXISTS "${{ steps.qt_creator.outputs.qtc_dir }}/${dir}/build_plugin.py")
            set(build_plugin_py "${dir}/build_plugin.py")
            break()
          endif()
        endforeach()

        execute_process(
          COMMAND python
            -u
            "${{ steps.qt_creator.outputs.qtc_dir }}/${build_plugin_py}"
            --name "$ENV{PLUGIN_NAME}-$ENV{QT_CREATOR_VERSION}-${{ matrix.config.artifact }}"
            --src .
            --build build
            --qt-path "${{ steps.qt.outputs.qt_dir }}"
            --qtc-path "${{ steps.qt_creator.outputs.qtc_dir }}"
            --output-path "$ENV{GITHUB_WORKSPACE}"
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          string(REGEX MATCH "FAILED:.*$" error_message "${output}")
          string(REPLACE "\n" "%0A" error_message "${error_message}")
          message("::error::${error_message}")
          message(FATAL_ERROR "Build failed")
        endif()

    - uses: actions/upload-artifact@v3
      id: upload_artifact
      with:
        path: ./${{ env.PLUGIN_NAME }}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}.7z
        name: ${{ env.PLUGIN_NAME}}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}.7z

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Store Release url
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

    - uses: actions/upload-artifact@v3
      with:
        path: ./upload_url
        name: upload_url

  publish:
    if: contains(github.ref, 'tags/v')

    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - {
            name: "Windows Latest x64", artifact: "Windows-x64.7z",
            os: ubuntu-latest
          }
        - {
            name: "Linux Latest x64", artifact: "Linux-x64.7z",
            os: ubuntu-latest
          }
        - {
            name: "macOS Latest x64", artifact: "macOS-x64.7z",
            os: macos-latest
          }
    needs: release

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.PLUGIN_NAME }}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}
        path: ./

    - name: Download URL
      uses: actions/download-artifact@v3
      with:
        name: upload_url
        path: ./
    - id: set_upload_url
      run: |
        upload_url=`cat ./upload_url`
        echo upload_url=$upload_url >> $GITHUB_OUTPUT

    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./${{ env.PLUGIN_NAME }}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}
        asset_name: ${{ env.PLUGIN_NAME }}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}
        asset_content_type: application/x-7z-compressed
